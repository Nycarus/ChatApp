@using DtoLibrary;
@using Newtonsoft.Json
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject IJSRuntime jsRuntime
@inject IConfiguration Configuration

@page "/login"

<PageTitle>Login</PageTitle>
<card class="card text-center" style="width:80%;min-width:500px;padding:50px;margin:auto;">
    <div class="form-group row">
        <label for="usernameInput" class="col-sm-2 col-form-label">
            Username:
        </label>

        <div class="col-sm-10">
            <input class="form-control" id="usernameInput" placeholder="Enter Username" @bind="username" />
        </div>
    </div>

    <label style="height:30px;color:red">
        @usernameError
    </label>

    <div class="form-group row">
        <label for="passwordInput" class="col-sm-2 col-form-label">
            Password:
        </label>

        <div class="col-sm-10">
            <input type="password" class="form-control" id="passwordInput" placeholder="Enter Password" @bind="password" />
        </div>
    </div>

    <label style="height:30px;color:red">
        @passwordError
    </label>

    <div class="form-group">
        <button class="btn btn-primary" @onclick="UserLogin" disabled="@disableButton">
            Login
        </button>
    </div>
</card>

@code {
    private string? username;
    private string? password;
    private string? usernameError;
    private string? passwordError;
    private bool disableButton = false;

    private async Task UserLogin()
    {
        if (!validateInput())
        {
            return;
        }

        disableButton = true;
        StateHasChanged();
        UserLoginDTO loginDto = new UserLoginDTO()
        {
            Username = username,
            Password = password
        };

        try
        {
            HttpClient httpClient = HttpClientFactory.CreateClient();
            var data = new StringContent(JsonConvert.SerializeObject(loginDto), System.Text.Encoding.UTF8, "application/json");
            var response = await httpClient.PostAsync($"{Configuration.GetSection("API").Value}/api/user/login", data);

            if (response.IsSuccessStatusCode)
            {
                await jsRuntime.InvokeVoidAsync("console.log", "Successfully logged in. Redirecting.");
                Navigation.NavigateTo("/", true);
            }
        }
        catch(Exception e)
        {
            await jsRuntime.InvokeVoidAsync("console.log", e.Message);
        }


        disableButton = false;
        StateHasChanged();
    }

    private bool validateInput()
    {
        bool valid = true;

        if (username == null || username == "")
        {
            usernameError = "Username is invalid.";
            valid = false;
        }
        else
        {
            usernameError = null;
        }

        if (password == null || password == "")
        {
            passwordError = "Password is invalid.";
            valid = false;
        }
        else
        {
            passwordError = null;
        }

        return valid;
    }
}
