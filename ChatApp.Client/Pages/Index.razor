@page "/"
@inject NavigationManager Navigation
@inject IConfiguration Configuration
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<Index> Logger
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime jsRuntime
@inject IHttpClientFactory HttpClientFactory
@using System.Security.Claims
@using ChatApp.Client.Data
@using Microsoft.AspNetCore.Http

<PageTitle>Index</PageTitle>

<div class="form-group">
    <label>
        Server:
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(hubConnection?.State == HubConnectionState.Connected ? false : true)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (string message in currentServer.messages)
    {
        <li>@message</li>
    }
</ul>


@code {
    private HubConnection? hubConnection;
    private List<ChatRoom> chatRooms = new List<ChatRoom>();
    private ChatRoom currentServer = new ChatRoom();
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        HttpClient httpClient = HttpClientFactory.CreateClient();
        var response = await httpClient.GetAsync($"{Configuration.GetSection("API").Value}/api/user/auth");

        if (!response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo($"/login", true);
        }

        string? url = Configuration.GetValue<string>("ChatUrl");
        if (url == null)
        {
            return;
        }

        try {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(url)
                .Build();

            hubConnection.On<int, string, string>("ReceiveMessage", (roomId, user, message) =>
            {
                ChatRoom chatRoom = chatRooms.Find(o => o.roomId == roomId);

                if (chatRoom != null)
                {
                    chatRoom.messages.Add($"{user}: ${message}");
                }
            });

            hubConnection.On<int, string>("NotificationMessage", (roomId, message) =>
            {
                ChatRoom chatRoom = chatRooms.Find(o => o.roomId == roomId);

                if (chatRoom != null)
                {
                    chatRoom.messages.Add($"Notification - ${message}");
                }
            });

            await hubConnection.StartAsync();
        }
        catch(Exception e)
        {
            Logger.LogInformation(e.Message, e);
        }
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", currentServer.roomId, messageInput);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}