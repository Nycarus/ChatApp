@page "/"
@inject NavigationManager Navigation
@inject IConfiguration Configuration
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<Index> Logger
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime jsRuntime
@inject IHttpClientFactory HttpClientFactory
@using System.Security.Claims
@using ChatApp.Client.Data
@using Microsoft.AspNetCore.Http
@using System.Net;
@using Newtonsoft.Json
@using ChatApp.DtoLibrary

<PageTitle>Index</PageTitle>

<div class="form-group">
    <div class="dropdown">
        <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            Servers
        </button>
        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
            @foreach (ChatRoom chatRoom in chatRooms)
            {
                <a class="dropdown-item" @onclick="() => ChangeServers(chatRoom)">@chatRoom.roomName</a>
            }
        </div>
    </div>

    <div>
        Current Chat Room: @currentServer?.roomName
    </div>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(hubConnection?.State == HubConnectionState.Connected ? false : true)">Send</button>

<hr>

<div>
    @stuff
    @errorMessage
</div>

<ul id="messagesList">
    @if (currentServer != null)
    {
        @foreach (string message in currentServer.messages)
        {
            <li>@message</li>
        }
    }
</ul>


@code {
    private HubConnection? hubConnection;
    private List<ChatRoom> chatRooms = new List<ChatRoom>();
    private ChatRoom currentServer = new ChatRoom();
    private string? messageInput;
    private string errorMessage = "";
    private string stuff;

    protected override async Task OnInitializedAsync()
    {
        HttpClient httpClient = HttpClientFactory.CreateClient();
        var response = await httpClient.GetAsync($"{Configuration.GetSection("API").Value}/api/user/auth");

        if (!response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo($"/login", true);
        }

        string? url = Configuration.GetSection("ChatUrl").Value;
        if (url == null)
        {
            return;
        }

        string token = response.Content.ReadAsStringAsync().Result;

        try {
            var roomResponse = await httpClient.GetAsync($"{Configuration.GetSection("API").Value}/api/chat/rooms");

            if (!roomResponse.IsSuccessStatusCode)
            {
                throw new Exception(roomResponse.StatusCode.ToString());
            }

            List<ChatRoomDTO> rooms = JsonConvert.DeserializeObject<List<ChatRoomDTO>>(await roomResponse.Content.ReadAsStringAsync());

            foreach (ChatRoomDTO room in rooms)
            {
                chatRooms.Add(new ChatRoom
                {
                    roomId = room.Id,
                    roomName = room.Name,
                    roomDescription = room.Description
                });
            }

            currentServer = chatRooms.FirstOrDefault();
            StateHasChanged();

            hubConnection = new HubConnectionBuilder()
                .WithUrl(url, options =>
                {
                    options.AccessTokenProvider = () => Task.FromResult(token);
                })
                .WithAutomaticReconnect()
                .Build();

            hubConnection.On<int, string, string>("ReceiveMessage", (roomId, user, message) =>
            {
                ChatRoom chatRoom = chatRooms.Find(o => o.roomId == roomId);

                if (chatRoom != null)
                {
                    chatRoom.messages.Add($"{user}: ${message}");
                }
            });

            hubConnection.On<int, string>("NotificationMessage", (roomId, message) =>
            {
                ChatRoom chatRoom = chatRooms.Find(o => o.roomId == roomId);

                if (chatRoom != null)
                {
                    chatRoom.messages.Add($"Notification - ${message}");
                }
            });

            StateHasChanged();
            await hubConnection.StartAsync();
        }
        catch(Exception e)
        {
            errorMessage = e.Message;
            stuff = e.Message;
        }
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", currentServer.roomId, messageInput);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public void ChangeServers(ChatRoom chatRoom)
    {
        currentServer = chatRoom;
    }
}