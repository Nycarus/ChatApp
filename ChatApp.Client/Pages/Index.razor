@page "/"
@inject NavigationManager Navigation
@inject IConfiguration Configuration
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<Index> Logger
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime jsRuntime
@inject IHttpClientFactory HttpClientFactory
@using System.Security.Claims
@using ChatApp.Client.Data
@using Microsoft.AspNetCore.Http
@using System.Net;
@using Newtonsoft.Json
@using ChatApp.DtoLibrary

<PageTitle>Index</PageTitle>


<div class="row border rounded" style="width:90%;height:95vh;margin:auto">
    <div class="col-4 d-flex flex-column mb-3 mt-3" style="border-right:2mm ridge rgba(106, 90, 255, .6);">
        <nav id="sidbarMenu" class="collapse d-lg-block flex-column align-items-stretch flex-grow-1">
            <div class="position-sticky" style="overflow:hidden;">
                <div style="height:50px;display:flex;justify-content:center;align-items:center;font-weight:600;font-size:20px;margin-top:1rem;">
                    Chat Rooms
                </div>

                <hr />
                <div class="list-group list-group-flush mt-4" style="overflow-y:hidden;overflow-x:hidden;display:flex;">
                    @foreach (ChatRoom chatRoom in chatRooms)
                    {
                        <a class=@(chatRoom.roomId == currentServer.roomId ? "dropdown-item border bg-secondary text-light" : "dropdown-item border") @onclick="() => ChangeServers(chatRoom)" style="padding-top:10px;padding-bottom:10px;">
                            @chatRoom.roomName
                        </a>
                    }
                </div>
            </div>
        </nav>
        <hr />
        <button type="button" class="btn btn-primary w-95 pb-1"> Create New Chat Room </button>
    </div>

    <div class="col-8 d-flex flex-column mb-3 mt-3">
        <div class="form-group row">
            <div class="align-middle">
                <p class="h3">
                    @currentServer?.roomName
                </p>
            </div>
        </div>

        <hr>

        @if(errorMessage != "")
        {
            <div>
                @errorMessage
                <hr />
            </div>
        }

        <div id="messagesList" class="border rounded" style="flex: 1 1 0; display:flex; -webkit-flex-direction:column; overflow-y:scroll;overflow-wrap:break-word;">
            @if (currentServer != null)
            {
                @foreach (string message in currentServer.messages)
                {
                    <div>@message</div>
                }
            }
        </div>

        <hr>

        <div class="input-group">
            <input @bind="messageInput" size="50" class="form-control" placeholder=@(currentServer != null ? $"Message {currentServer.roomName}" : "Send Message") />
            <button type="button" class="btn btn-primary" @onclick="Send" disabled="@(hubConnection?.State == HubConnectionState.Connected ? false : true)">Send</button>
        </div>
        
    </div>
</div>


@code {
    private HubConnection? hubConnection;
    private List<ChatRoom> chatRooms = new List<ChatRoom>();
    private ChatRoom currentServer = new ChatRoom();
    private string messageInput = "";
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        HttpClient httpClient = HttpClientFactory.CreateClient();
        var response = await httpClient.GetAsync($"{Configuration.GetSection("API").Value}/api/user/auth");

        if (!response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo($"/login", true);
        }

        string? url = Configuration.GetSection("ChatUrl").Value;
        if (url == null)
        {
            return;
        }

        string token = response.Content.ReadAsStringAsync().Result;

        try {
            var roomResponse = await httpClient.GetAsync($"{Configuration.GetSection("API").Value}/api/chat/rooms");

            if (!roomResponse.IsSuccessStatusCode)
            {
                throw new Exception(roomResponse.StatusCode.ToString());
            }

            List<ChatRoomDTO> rooms = JsonConvert.DeserializeObject<List<ChatRoomDTO>>(await roomResponse.Content.ReadAsStringAsync());

            foreach (ChatRoomDTO room in rooms)
            {
                chatRooms.Add(new ChatRoom
                {
                    roomId = room.Id,
                    roomName = room.Name,
                    roomDescription = room.Description
                });
            }

            currentServer = chatRooms.FirstOrDefault();
            StateHasChanged();

            hubConnection = new HubConnectionBuilder()
                .WithUrl(url, options =>
                {
                    options.AccessTokenProvider = () => Task.FromResult(token);
                })
                .WithAutomaticReconnect()
                .Build();

            hubConnection.On<int, string, string>("ReceiveMessage", async (roomId, user, message) =>
            {
                ChatRoom chatRoom = chatRooms.Find(o => o.roomId == roomId);

                if (chatRoom != null)
                {
                    chatRoom.messages.Add($"{user}: {message}");
                    StateHasChanged();
                }
            });

            hubConnection.On<int, string>("NotificationMessage", (roomId, message) =>
            {
                ChatRoom chatRoom = chatRooms.Find(o => o.roomId == roomId);

                if (chatRoom != null)
                {
                    chatRoom.messages.Add($"Notification - {message}");
                    StateHasChanged();
                }
            });

            StateHasChanged();
            await hubConnection.StartAsync();
        }
        catch(Exception e)
        {
            errorMessage = e.Message;
        }
    }

    private async Task Send()
    {
        if (hubConnection is not null && messageInput != "")
        {
            await hubConnection.SendAsync("SendMessage", currentServer.roomId, messageInput);
            messageInput = "";
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public void ChangeServers(ChatRoom chatRoom)
    {
        currentServer = chatRoom;
        StateHasChanged();
    }
}