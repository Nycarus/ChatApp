@page "/"
@inject NavigationManager Navigation
@inject IConfiguration Configuration
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<Index> Logger
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime jsRuntime
@inject IAuthenticationService AuthenticationService
@inject IChatService ChatService
@inject HttpClient HttpClient
@using System.Security.Claims
@using ChatApp.Client.Data
@using Microsoft.AspNetCore.Http
@using System.Net;
@using Newtonsoft.Json
@using ChatApp.DtoLibrary
@using ChatApp.Client.Pages.Components

<PageTitle>Index</PageTitle>


<div class="row border rounded" style="width:90%;height:95vh;margin:auto">
    <div class="col-3 d-flex flex-column mb-3 mt-3" style="border-right:2mm ridge rgba(106, 90, 255, .6);">
        <nav id="sidbarMenu" class="d-flex flex-column align-items-stretch flex-grow-1">
            <div style="height:50px;display:flex;justify-content:center;align-items:center;font-weight:600;font-size:20px;margin-top:1rem;">
                Chat Rooms
            </div>

            <hr />
            <div class="d-flex flex-column mt-4" style="overflow-x:hidden;overflow-y:scroll;flex: 1 1 0;">
                @foreach (ChatRoom chatRoom in chatRooms)
                {
                    <div class="d-flex flex-row">
                        <a class=@(chatRoom.roomId == currentServer?.roomId ? "dropdown-item border bg-secondary text-light" : "dropdown-item border") @onclick="() => ChangeServers(chatRoom)" style="padding-top:10px;padding-bottom:10px;text-overflow:ellipsis;display:flex;flex: 1 1 0;overflow:hidden;">
                            @chatRoom.roomName
                        </a>
                        <button type="button" class="btn btn-outline-primary" @onclick="() => LeaveRoom(chatRoom)">
                            &times;
                        </button>
                    </div>
                }
            </div>
        </nav>
        <hr />
        <CreateRoomDialog CreateRoomCallback="@JoinRoom"/>
        <JoinRoomDialog JoinRoomCallback="@JoinRoom" />
    </div>

    <div class="col-9 d-flex flex-column mb-3 mt-3">
        <div class="form-group row">
            <div class="align-middle">
                <div class="d-flex flex-row">
                    <p class="h3">
                        @currentServer?.roomName
                    </p>
                    <p class="h4 ms-2">
                        (@currentServer?.roomId)
                    </p>
                </div>
                <p class="h6">
                    @currentServer?.roomDescription
                </p>
            </div>
        </div>

        <hr>

        @if(errorMessage != "")
        {
            <div>
                <p style="color:red;">
                    @errorMessage
                </p>
                <hr />
            </div>
        }

        <div id="messagesList" class="border rounded" style="flex: 1 1 0; display:flex; -webkit-flex-direction:column; overflow-y:scroll;overflow-wrap:break-word;">
            @if (currentServer != null)
            {
                @foreach (Message message in currentServer.messages)
                {
                    <div class="d-flex flex-column border rounded p-2">
                        <div class="d-flex flex-row align-items-center">
                            <p class="h5 align-items-center fw-bold">
                                @message.Username
                            </p>
                            @if (@message.Time != DateTime.MinValue)
                            {
                                <p class="h5 align-items-center ps-2" style="font-size:14px;">
                                    @message.Time
                                </p>
                            }
                        </div>
                        <div>
                            @message.Content
                        </div>
                    </div>
                }
            }
        </div>

        <hr>

        <div class="input-group">
            <input @bind="messageInput" size="50" class="form-control" placeholder=@(currentServer != null ? $"Message {currentServer.roomName}" : "Send Message") />
            <button type="button" class="btn btn-primary" @onclick="Send" disabled="@(hubConnection?.State == HubConnectionState.Connected ? false : true)">Send</button>
        </div>
        
    </div>
</div>


@code {
    private HubConnection? hubConnection;
    private List<ChatRoom> chatRooms = new List<ChatRoom>();
    private ChatRoom currentServer = new ChatRoom();
    private string messageInput = "";
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        string token = await AuthenticationService.GetUserSession();

        if (token ==  "" || token == null)
        {
            Navigation.NavigateTo($"/login", true);
        }

        string? chatUrl = Configuration.GetSection("ChatUrl").Value;
        if (chatUrl == null)
        {
            return;
        }

        try {
            chatRooms = await ChatService.GetRoomList();

            currentServer = chatRooms.FirstOrDefault();
            StateHasChanged();

            hubConnection = new HubConnectionBuilder()
                .WithUrl(chatUrl, options =>
                {
                    options.AccessTokenProvider = () => Task.FromResult(token);
                })
                .WithAutomaticReconnect()
                .Build();

            hubConnection.On<int, string, string>("ReceiveMessage", (roomId, user, message) =>
            {
                ChatRoom chatRoom = chatRooms.Find(o => o.roomId == roomId);

                if (chatRoom != null)
                {
                    chatRoom.messages.Add(new Message()
                    {
                        Username = user,
                        Content = message,
                        Time = DateTime.Now
                    });
                    StateHasChanged();
                }
            });

            hubConnection.On<int, string>("NotificationMessage", (roomId, message) =>
            {
                ChatRoom chatRoom = chatRooms.Find(o => o.roomId == roomId);

                if (chatRoom != null)
                {
                    chatRoom.messages.Add(new Message()
                    {
                        Username = "Notification",
                        Content = message
                    });
                    StateHasChanged();
                }
            });

            StateHasChanged();
            await hubConnection.StartAsync();
        }
        catch(Exception e)
        {
            errorMessage = e.Message;
        }
    }

    private async Task Send()
    {
        if (hubConnection is not null && messageInput != "")
        {
            await hubConnection.SendAsync("SendMessage", currentServer.roomId, messageInput);
            messageInput = "";
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public void ChangeServers(ChatRoom chatRoom)
    {
        currentServer = chatRoom;
        StateHasChanged();
    }

    public async Task JoinRoom(ChatRoom chatRoom)
    {
        if (hubConnection is not null && chatRoom != null)
        {
            if (chatRooms.Count == 0)
            {
                currentServer = chatRoom;
            }
            chatRooms.Add(chatRoom);
            await hubConnection.SendAsync("ConnectToRoomAsync", chatRoom.roomId);
        }
    }

    public async Task LeaveRoom(ChatRoom chatRoom)
    {
        if (hubConnection is not null && chatRoom != null)
        {
            await hubConnection.SendAsync("DisconnectFromRoomAsync", chatRoom.roomId);

            chatRooms.Remove(chatRoom);

            if (chatRooms.Count > 0 && chatRoom.roomId == currentServer.roomId)
            {

                currentServer = chatRooms[0];
            }
        }
    }
}