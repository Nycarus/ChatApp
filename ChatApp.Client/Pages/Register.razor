@using DtoLibrary;
@using Newtonsoft.Json
@using ChatApp.Client.Data
@inject IAuthenticationService AuthenticationService
@inject NavigationManager Navigation
@inject IJSRuntime jsRuntime
@inject IConfiguration Configuration

@page "/register"

<PageTitle>Register</PageTitle>

<card class="card text-center" style="width:80%;min-width:500px;padding:50px;margin:auto;">
    <h3 class="m-auto p-3">
        Register
    </h3>

    <div class="form-group row">
        <label for="usernameInput" class="col-sm-2 col-form-label">
            Username:
        </label>

        <div class="col-sm-10">
            <input class="form-control" id="usernameInput" placeholder="Enter Username" @bind="username" />
        </div>
    </div>

    <label style="height:30px;color:red">
        @usernameError
    </label>

    <div class="form-group row">
        <label for="passwordInput" class="col-sm-2 col-form-label">
            Password:
        </label>

        <div class="col-sm-10">
            <input type="password" class="form-control" id="passwordInput" placeholder="Enter Password" @bind="password" />
        </div>
    </div>

    <label style="height:30px;color:red">
        @passwordError
    </label>

    <div class="form-group row">
        <label for="passwordConfirmInput" class="col-sm-2 col-form-label">
            Re-enter Password:
        </label>

        <div class="col-sm-10">
            <input type="password" class="form-control" id="passwordConfirmInput" placeholder="Enter Password Again" @bind="passwordConfirm" />
        </div>
    </div>

    <label style="height:30px;color:red">
        @passwordConfirmError
    </label>

    <div class="form-group">
        <button class="btn btn-primary" @onclick="UserRegister" disabled="@disableButton">
            Register
        </button>
    </div>
</card>

@code {
    private string username = "";
    private string password = "";
    private string passwordConfirm = "";
    private string usernameError = "";
    private string passwordError = "";
    private string passwordConfirmError = "";
    private bool disableButton = false;

    private async Task UserRegister()
    {
        if (!validateInput())
        {
            return;
        }

        disableButton = true;
        StateHasChanged();

        try
        {
            bool result = await AuthenticationService.Register(username, password);

            if (result)
            {
                await jsRuntime.InvokeVoidAsync("console.log", "Register successful. Redirecting.");
                Navigation.NavigateTo("/login", true);
            }
        }
        catch (Exception e)
        {
            await jsRuntime.InvokeVoidAsync("console.log", e.Message);
        }


        disableButton = false;
        StateHasChanged();
    }

    private bool validateInput()
    {
        bool valid = true;

        if (username == "")
        {
            usernameError = "Username is invalid.";
            valid = false;
        }
        else
        {
            usernameError = "";
        }

        if (password == "")
        {
            passwordError = "Password is invalid.";
            valid = false;
        }
        else
        {
            passwordError = "";
        }

        if (passwordConfirm == "")
        {
            passwordConfirmError = "Password is invalid.";
            valid = false;
        }
        else if (passwordConfirm != password)
        {
            passwordConfirmError = "Password does not match.";
        }
        else
        {
            passwordConfirmError = "";
        }

        return valid;
    }
}
